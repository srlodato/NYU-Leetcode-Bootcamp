class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:

        #Get the lengths of s and p
        length_s = len(s)
        length_p = len(p)

        #Store starting indices of found anagrams
        result = []

        #if s is shorter than p, then an anagram is impossible
        if length_s < length_p:
            return result
        
        #Build hash map for string p - how many times each character must appear in an anagram
        p_map = {}
        for char in p:
            if char in p_map:
                p_map[char] += 1
            else:
                p_map[char] = 1
        
        #Build window hash map for the first length_p characters in s
        #Tracks how many times each character appears in the current window

        s_map = {}
        for i in range(length_p):
            char = s[i]
            if char in s_map:
                s_map[char] += 1
            else:
                s_map[char] = 1
        
        #Compare the first s window's hash map to p's hash map
        if s_map == p_map:
            result.append(0)

        #Continue to slide the window through the string s
        for i in range (length_p, length_s):
            #Account for character leaving the window
            left_char = s[i - length_p]
            s_map[left_char] -= 1
            if s_map[left_char] == 0:
                del s_map[left_char]

            #Account for character that is entering the window from the right
            right_char = s[i]
            if right_char in s_map:
                s_map[right_char] += 1
            else:
                s_map[right_char] = 1
            
            #Once the window is updated, we can compare it to p's hash map
            if s_map == p_map:
                start_index = i - length_p + 1
                result.append(start_index)
        
        return result
